module statix/lang/Type

imports

//  nabl2/API

  statix/lang/Common
  statix/lang/Core

  statix/API

sorts

  IType // internal type
  TType // term type
  TTypes

  // STUB FIXES
  NaBL2Occurrence

context-free syntax

  IType.NS   = [[TTypes]]
  IType.OP   = [[TTypes] -> [TType]]

  TTypes = {TType " * "}*

  IType.PRED = [[TType*]]
  IType.FUN  = [[TType*] -> [TType]]

  TType.SORT       = <<SortId>>
  TType.INT        = <int>
  TType.STRING     = <string>
  TType.PATH       = <path>
  TType.LABEL      = <label>
  TType.OCCURRENCE = <occurrence>
  TType.AST_ID     = <astId>
  TType.SCOPE      = <scope>
  TType.LIST       = <list(<TType>)>
  TType.TUPLE      = <(<{TType " * "}*>)>

sorts

  ExtOrigin // custom prettyprint rule in statix/lang/scope-extension.str

lexical sorts

  Scope-String

lexical syntax

  Scope-String = []

context-free sorts
  ExtConstraints ExtConstraint ExtSets ExtSet ExtId ExtLabel ExtEqs ExtEq ExtOp ExtDecl ExtRef

context-free syntax

  ExtConstraints = <| <{ExtConstraint "\n"}*>>

  ExtConstraint.ExtProvides  = [[ExtSet] ! [ExtSet][ExtOrigin]]
  ExtConstraint.ExtRequires  = [[ExtSet] ? [ExtSet][ExtOrigin]]
  ExtConstraint.ExtIsCovered = [[ExtSet] is closed[ExtOrigin]]
  ExtConstraint.ExtProvidesEsc  = [[ExtSet] ^! [ExtSet][ExtOrigin]]
  ExtConstraint.ExtRequiresEsc  = [[ExtSet] ^? [ExtSet][ExtOrigin]]


  ExtSets = <| <{ExtSet "\n"}*>>

  ExtSet.ExtParam = [[ExtId].[Stx-INT]]
  ExtSet.ExtVar   = [[ExtId]]
  ExtSet.ExtLit   = [{[{ExtLabel ", "}*]}]
  ExtSet.ExtAll   = "*"
  ExtSet.ExtNone  = "0"


  ExtId.ExtDecl = <decl <ExtDecl>>
  ExtId.ExtRef  = <ref <ExtRef>>

  ExtDecl.BasicDecl = <<VARID>>
  ExtDecl.ScopedDecl = <<VARID> <Scope-String>>

  ExtRef.VarRef = <<VARID>>
  ExtRef.ConstraintRef = <<ConstraintId>>


  ExtLabel = RelRef
  ExtLabel = EdgeRef


  ExtEqs = <| <{ExtEq "\n"}*>>

  ExtEq = [[ExtSet] := [ExtOp]]


  ExtOp.Union        = [union([{ExtOp ", "}*])]
  ExtOp.Intersection = [isect([{ExtOp ", "}*])]
  ExtOp              = ExtSet

context-free sorts
  PatternConstraint

context-free syntax

  PatternConstraint.DistinctPatterns = <distinct patterns <{NaBL2Occurrence ", "}*>>
  PatternConstraint.NoDuplicatePatterns = <patterns {<{NaBL2Occurrence ", "}*>} do not duplicate {<{NaBL2Occurrence ", "}*>} <ExtOrigin>>
