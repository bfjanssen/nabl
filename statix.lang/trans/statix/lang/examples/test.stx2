module test

rules
    rule: int * list(int) -> int
    
    rule(8, [8, 9]) = 9 :-
      "hoi" == "hallo".
    
    rule(x, [7, 8, 9]) = x.
    
    rule2: (int * string)
    
    rule2((8, "hello")).
    
    rule3: list(int)
    
    rule3([8|[8, 8]]) :-
      rule(9, [8]) == 8.
    
    rule3([]).
    
    rule4: int * int -> int
    
    rule4(x, #(3 + y)) = 8 :-
        x #< y.
        
    rule4(x, x) = 8 :-
        x #< 7.

    
signature
    sorts
        INT = int
        STR = string
        ArithExp
        StrExp
        
    constructors
        Plus : INT * INT -> ArithExp
        Concat : STR * STR -> StrExp        
        
rules
    wrongPlus: ArithExp -> int
    wrongPlus(Plus(x, y)) = y.
    
    wrongConcat: StrExp -> string
    wrongConcat(Concat(x, y)) = x.
    
    correctPlus: ArithExp -> int
    correctPlus(Plus(x, y)) = z :-
        z == #(x + y).
    