module statix/lang/normalize/maps

imports

  libspoofax/term/annotation
  libspoofax/term/origin

  nabl2/shared/vars
  nabl2/api

  signatures/statix/lang/-
  statix/lang/statics/-
  statix/lang/util
  statix/lang/normalize/util

rules

  // replace functional and predicate maps to explicit constraints and rules

  normalize-mapping-constraints-legacy(|a) =
    nabl2-custom-analysis-info-msg(|"| Normalize mapping constraints...")
  ; normalize-in-sections(replace-map-legacy(|a))

  normalize-mapping-constraints =
    normalize-in-sections(replace-map)

  replace-map: CDeriveMap(x, y, lift*) -> rule*
    with ty@PRED(tys) := <norm-get-ast-type> x;
         ty_lift*     := <zip> (tys, lift*);
         decl         := <cmap-decl(|ty)> x;
         base-rule    := <cmap-base-rule(|ty)> (x, y, ty_lift*);
         elem-rule    := <cmap-elem-rule(|ty)> (x, y, ty_lift*);
         rule*        := [decl, base-rule, elem-rule]
      <+ rule* := []

  replace-map-legacy(|a): CDeriveMap(x, y, lift*) -> rule*
    with ty@PRED(tys) := <norm-get-ast-decl-type(|a)> x;
         ty_lift*     := <zip> (tys, lift*);
         decl         := <cmap-decl-legacy(|a)> x;
         base-rule    := <cmap-base-rule(|ty)> (x, y, ty_lift*);
         elem-rule    := <cmap-elem-rule(|ty)> (x, y, ty_lift*);
         rule*        := [decl, base-rule, elem-rule]
      <+ rule* := []

  cmap-decl(|ty): x -> CDecl(InductiveC(), x, sort)
    where sort := <type-to-sort;norm-set-ast-type(|ty)> ty

  cmap-decl-legacy(|a): x -> CDecl(ind, x, sort)
    where ind  := <norm-get-ast-decl-property(|a,"ind")> x;
          ty   := <norm-get-ast-decl-type(|a)> x;
          sort := <type-to-sort;norm-set-ast-type(|ty)> ty

  cmap-base-rule(|ty): (x, y, ty_lift*) -> Rule(NoName(), h, CTrue())
    where ps := <map(lift-base)> ty_lift*;
          h  := C(x, ps)

  cmap-elem-rule(|ty): (x, y, ty_lift*) -> Rule(NoName(), h, CConj(call, rec))
    where ps   := <lift-head-elems(|"x")> ty_lift*;
          call := C(y, <lift-call-elems(|"x")> ty_lift*, NoMessage());
          rec  := C(x, <lift-rec-elems(|"x")> ty_lift*, NoMessage());
          h    := <norm-set-ast-type(|ty)> C(x, ps)


  replace-map: FDeriveMap(x, y, in-lift*, out-lift) -> rule*
    with ty@FUN(intys, outty) := <norm-get-ast-type> x;
         FUN(_, elem_outty)   := <norm-get-ast-type> y;
         in-ty_lift*          := <zip> (intys, in-lift*);
         out-ty_lift          := (outty, out-lift);
         decl                 := <fmap-decl(|ty)> x;
         base-rule            := <fmap-base-rule(|ty, elem_outty)> (x, y, in-ty_lift*, out-ty_lift);
         elem-rule            := <fmap-elem-rule(|ty, elem_outty)> (x, y, in-ty_lift*, out-ty_lift);
         rule*                := [decl, base-rule, elem-rule]
      <+ rule* := []

  replace-map-legacy(|a): FDeriveMap(x, y, in-lift*, out-lift) -> rule*
    with ty@FUN(intys, outty) := <norm-get-ast-decl-type(|a)> x;
         FUN(_, elem_outty)   := <norm-get-ast-decl-type(|a)> y;
         in-ty_lift*          := <zip> (intys, in-lift*);
         out-ty_lift          := (outty, out-lift);
         decl                 := <fmap-decl-legacy(|a)> x;
         base-rule            := <fmap-base-rule(|ty, elem_outty)> (x, y, in-ty_lift*, out-ty_lift);
         elem-rule            := <fmap-elem-rule(|ty, elem_outty)> (x, y, in-ty_lift*, out-ty_lift);
         rule*                := [decl, base-rule, elem-rule]
      <+ rule* := []

  fmap-decl(|ty): x -> CDecl(InductiveC(), x, sort)
    where sort := <type-to-sort;norm-set-ast-type(|ty)> ty

  fmap-decl-legacy(|a): x -> CDecl(ind, x, sort)
    where ind  := <norm-get-ast-decl-property(|a,"ind")> x;
          ty   := <norm-get-ast-decl-type(|a)> x;
          sort := <type-to-sort;norm-set-ast-type(|ty)> ty

  fmap-base-rule(|ty, elem_outty): (x, y, in-ty_lift*, out-ty_lift) -> Rule(NoName(), h, CTrue())
    where inps := <map(lift-base)> in-ty_lift*;
          outp := <lift-base> out-ty_lift;
          h    := <norm-set-ast-type(|ty)> F(x, inps, outp)

  fmap-elem-rule(|ty, elem_outty): (x, y, in-ty_lift*, out-ty_lift) -> Rule(NoName(), h, CConj(call, rec))
    where FUN(_, rec_outty) := ty;
          inps     := <lift-head-elems(|"x")> in-ty_lift*;
          outp     := <lift-elem-head(|"y")> (1, out-ty_lift);
          in-call  := <lift-call-elems(|"x")> in-ty_lift*;
          out-call := <lift-elem-call(|"y")> (1, out-ty_lift);
          call-op  := <norm-set-ast-type(|elem_outty)> COp(y, in-call);
          call     := CEqual(call-op, out-call, NoMessage());
          in-rec   := <lift-rec-elems(|"x")> in-ty_lift*;
          out-rec  := <lift-elem-rec(|"y")> (1, out-ty_lift);
          rec-op   := <norm-set-ast-type(|rec_outty)> COp(x, in-rec);
          rec      := CEqual(rec-op, out-rec, NoMessage());
          h        := <norm-set-ast-type(|ty)> F(x, inps, outp)

  lift-base:
      (ty, IdLift())
      -> <mk-Wld(|ty)>
  lift-base:
      (LIST(ty), ListLift())
      -> <mk-Nil(|ty)>
  lift-base:
      (TUPLE(tys), TupleLift(lifts))
      -> <mk-Tuple>(<zip(lift-base)> (tys, lifts))


  lift-head-elems(|x) = map-with-index(lift-elem-head(|x))

  lift-elem-head(|x):
      (i, (ty, IdLift()))
      -> <lift-Var(|ty, x)> i
  lift-elem-head(|x):
      (i, (LIST(ty), ListLift()))
      -> <mk-ListTail>([<lift-Var(|ty,x)> i], <lift-Var(|LIST(ty), $[[x]s])> i)
  lift-elem-head(|x):
      (i, (TUPLE(tys), TupleLift(lifts)))
      -> <mk-Tuple>(<zip;lift-head-elems(|<lift-name(|x)> i)> (tys, lifts))


  lift-call-elems(|x) = map-with-index(lift-elem-call(|x))

  lift-elem-call(|x):
      (i, (ty, IdLift()))
      -> <lift-Var(|ty, x)> i
  lift-elem-call(|x):
      (i, (LIST(ty), ListLift()))
      -> <lift-Var(|ty,x)> i
  lift-elem-call(|x):
      (i, (TUPLE(tys), TupleLift(lifts)))
      -> <mk-Tuple>(<zip;lift-call-elems(|<lift-name(|x)> i)> (tys, lifts))


  lift-rec-elems(|x) = map-with-index(lift-elem-rec(|x))

  lift-elem-rec(|x):
      (i, (ty, IdLift()))
      -> <lift-Var(|ty, x)> i
  lift-elem-rec(|x):
      (i, (LIST(ty), ListLift()))
      -> <lift-Var(|LIST(ty), $[[x]s])> i
  lift-elem-rec(|x):
      (i, (TUPLE(tys), TupleLift(lifts)))
      -> <mk-Tuple>(<zip;lift-rec-elems(|<lift-name(|x)> i)> (tys, lifts))

  lift-name(|x) = !$[[x]_[<int-to-string>]]

  lift-Var(|ty,x) = lift-name(|x); mk-Var(|ty)
