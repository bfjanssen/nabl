module statix/lang/precompile/legacy/queries

imports

  libstratego-aterm

  nabl2/api

  signatures/statix/lang/Core-sig
  signatures/statix/lang/Sugar-sig
  signatures/statix/lang/PreCompiled-sig

  pp/statix/lang/Core-pp

  statix/lang/analysis

  statix/lang/precompile/queries

signature

  sorts
    StateMachine
    State
    Accepting
    LType

  constructors

    StateMachine : /* states */List(State) * /* initial */ String -> StateMachine
    State        : /* id */String * /* accepts*/ Accepting * /* transitions (lbl -> state) */List(Label, String) -> State

    Accept : Accepting
    Reject : Accepting

    EDGE : LType

rules

  precompile-queries-legacy(|a) = bottomup(try(precompile-query-legacy(|a)))

  precompile-query-legacy(|a):
    q@CResolveQuery(rel, filter, min, prj, s, pst, msg) -> CPreCompiledQuery(q, cstate*, initial)
    with {| LblRef: with(
      rules(LblRef: EOP() -> EOP())
    ; Filter(lbl-re, _) := filter
    ; Min(ord*, deq)    := min

    // In this code, we treat labels/label annotations as follows:
    // - Internally, labels are represented by their _declarations_
    //   Therefore, label refs are resolved for `rel`, `lbl-re` and `ord*`
    // - When inserted in a `SubEnv/2` term, an original reference is
    //   substituted back. This ensures creating qualified names during
    //   core AST generation works properly.
    // - The built-in `decl` label is treated similar.
    // - The end-of-path (EOP) label does not have a declaration.
    //   Therefore it is used _without_ annotations.

    // Normalize labels by their declarations, to allow comparison.
    ; rel'  := <resolve-lbl-ref-legacy(|a)> rel
    ; re'   := <resolve-lbl-refs-legacy(|a)> lbl-re

    // Label order to relation
    ; lbl-ord' := <resolve-lbl-refs-legacy(|a)> ord*
    ; lbl-ord := <ords-to-relation(|rel')> lbl-ord'

    // Create state machine for RE
    // FIXME: invalid on negatives. Collect all labels from analysis instead.
    ; alphabet* := <nabl2-get-all-decls(|a); filter(is-label-legacy); map(nabl2-get-occurrence-name); make-set; map(!Label(<id>))>
    ; alphabet' := <normalize-alphabet> (rel', alphabet*)
    ; StateMachine(state*, initial) := <labelre-to-states(|rel', alphabet')> re'

    // Compile states
    ; if <shadow-unconditional> deq then
        cstate* := <map(compile-state(compile-shadow-unconditional|lbl-ord))> state*
      else
        cstate* := <map(compile-state(compile-shadow-conditional|lbl-ord))> state*
      end
    )|}

rules

  is-label-legacy = where(nabl2-get-occurrence-ns; ?"Edge")

  resolve-lbl-refs-legacy(|a) = bottomup(try(resolve-lbl-ref-legacy(|a)))

  resolve-lbl-ref-legacy(|a): EOP() -> EOP()
  resolve-lbl-ref-legacy(|a): lbl@Decl() -> <resolve-lbl-ref'-legacy(|a)> lbl
  resolve-lbl-ref-legacy(|a): Label(lbl) -> Label(<resolve-lbl-ref'-legacy(|a)> lbl)

  resolve-lbl-ref'-legacy(|a): lbl-ref -> lbl-decl
    with decl     := <nabl2-get-ast-property(|a, "decl")> lbl-ref
       ; lbl-decl := <nabl2-get-occurrence-name> decl
       // Maybe override when label occurs multiple times in re/lbl-ord
       // Should not matter, as it only serves to restore reference
       // resolution for name qualification.
       ; rules(LblRef: lbl-decl -> lbl-ref)
