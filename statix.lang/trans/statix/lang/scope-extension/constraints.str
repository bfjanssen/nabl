module statix/lang/scope-extension/constraints

imports

  nabl2/api

  statix/api

  signatures/statix/lang/-
  statix/lang/-
  statix/lang/statics/-

  pp
  pp/statix/lang/-

rules

  ext-get-constraint-ref: x -> ExtRef(ConstraintRef(x))

  ext-get-var-ref: x -> ExtRef(VarRef(x))

  ext-get-var-decl: x -> ExtDecl(BasicDecl(x))

rules

  explicate-ext-constraints(|a): c* -> c''*
    with c'* := <map(try(ext-escape-constraint(|a)))> c*
       ; c''* := <map(topdown(try(ext-explicate-set(|a))))> c'*

  ext-escape-constraint(|a): ExtProvides(v, s, o) -> ExtProvidesEsc(v, s, o)
    where <ext-var-escapes(|a)> v

  ext-escape-constraint(|a): ExtRequires(v, s, o) -> ExtRequiresEsc(v, s, o)
    where <ext-var-escapes(|a)> v

  ext-var-escapes(|a): ExtVar(ExtRef(VarRef(r))) -> <id>
    where esc := <stx-get-ast-property(|a, "escape")> r
        ; <raw-eq> (esc, 0)

  ext-path-scopes = nabl2-get-path-scopes; init


  // Variable occurrences have scopes as indices, which makes it difficult to
  // construct them directly. Therefore, we construct regular (ast indexed)
  // occurrences, but get the real declaration from the ast using the index
  // in the initial occurrence.

  ext-explicate-set(|a): ExtDecl(BasicDecl(x)) -> ExtDecl(ScopedDecl(x, s))
    where s := <stx-get-ast-property(|a, "declScope")> x

  ext-explicate-set(|a): ExtRef(ConstraintRef(r)) -> ExtDecl(BasicDecl(d))
    where d := <stx-get-ast-ref(|a)> r

  ext-explicate-set(|a): ExtRef(VarRef(r)) -> ExtDecl(ScopedDecl(d, s))
    where d := <stx-get-ast-ref(|a)> r
        ; s := <stx-get-ast-property(|a, "declScope")> r

  ext-get-name: ExtRef(ConstraintRef(x)) -> x

  ext-get-name: ExtRef(VarRef(x)) -> x

  ext-get-name: ExtDecl(BasicDecl(x)) -> x

  ext-get-name: ExtDecl(ScopedDecl(x, _)) -> x
