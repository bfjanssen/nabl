module statix/lang/statics/core

imports
  signatures/StatixLang-sig
  signatures/statix/lang/Core-sig
  signatures/statix/lang/Sugar-sig
  signatures/statix/lang/NoParse-sig
  signatures/statix/lang/Type-sig
  statix/lang/statics/util
  statix/lang/statics/types
  statix/lang/statics/constraints
  statix/lang/statics/rules
  statix/lang/statics/relations
  statix/lang/statics/queries
  statix/lang/statics/duplicate-patterns

rules
  projectOk: scope

  projectOk(_).


  fileOk: scope * Start

  fileOk(s, Module2Start(mod)) :-
    moduleOk(s, mod).

  fileOk(s, Test2Start(test)) :-
    testOk(s, test).

  moduleOk: scope * Module

  moduleOk(s, Module(id, sections)) :- {s_mod}
    new s_mod, s_mod -P-> s,
    declareModule(s, id, s_mod),
    sectionsOk(s_mod, sections).

  testOk: scope * Test

  testOk(s, Test(constr, sections)) :- {s_test}
    new s_test, s_test -P-> s,
    declareModule(s, "TEST", s_test),
    declareBarrier(s_test),
    sectionsOk(s_test, sections),
    constraintOk(s_test, constr).

rules
  sectionOk: scope * Section
  sectionsOk maps sectionOk(*, list(*))

  sectionOk(s, Signature(sigs)) :-
    signaturesOk(s, sigs).

  sectionOk(s, Rules(rules)) :-
    rulesOk(s, rules).

  sectionOk(s, Imports(imports)) :-
    importsOk(s, imports).

rules
  signatureOk: scope * Signature
  signaturesOk maps signatureOk(*, list(*))

  signatureOk(s, Constraints(decls)) :-
    cDeclsOk(s, decls).

  signatureOk(s, Relations(decls)) :-
    relDeclsOk(s, decls).

  signatureOk(s, NameResolution(ls)) :-
    resolutionParamsOk(s, ls).

  signatureOk(s, Sorts(sdecls)) :-
    sortDeclsOk(s, sdecls).

  signatureOk(s, Constructors(opdecls)) :-
    opDeclsOk(s, opdecls).

rules
  importOk: scope * Import
  importsOk maps importOk(*, list(*))

  importOk(s, Import(id)) :- {s_import}
    s_import == scopeOfModule(s, id),
    s -I-> s_import.
    //noDuplicateImportedConstraints(s, s_import),
    //noDuplicateImportedSorts(s, s_import),
    //noDuplicateImportedCons(s, s_import),
    //noDuplicateImportedLabels(s, s_import),
    //noDuplicateImportedPatterns(s, s_import).