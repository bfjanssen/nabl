module statix/lang/statics/legacy/hacks

imports

  signatures/nabl2/shared/constraints/-

  signatures/statix/lang/-
  statix/lang/util
  statix/lang/statics/-
  statix/lang/statics/legacy/-

rules

  op-name: (x, ts) -> $[[x]/[<int-to-string> n]]
    with n := < is-list; length
              + ?ConstOp(_); !0
              + ?ArrowOp(<id>, _); length
              > ts

  same-name: (x, y, msginfo) -> c
    with if <raw-eq> (x, y) then c := CTrue(msginfo) else c := CFalse(msginfo) end

rules

  inout-type = inout-types; tys-to-ty
  inout-types: PRED(tys)          -> tys
  inout-types: FUN(intys, outty) -> <conc> (intys, [outty])

  in-type = in-types; tys-to-ty
  in-types: PRED(tys)         -> tys
  in-types: FUN(intys, outty) -> intys

  out-type: FUN(intys, outty) -> outty

  tys-to-ty: [ty] -> ty
  tys-to-ty: tys  -> TUPLE(tys)
    where not([_] := tys)

rules

  lifts-some: (lifts, _, msginfo) -> CTrue(msginfo)
    where <collect-one(?ListLift())> lifts

  lift-to-lifts: IdLift() -> [IdLift()]
  lift-to-lifts: ListLift() -> [ListLift()]
  lift-to-lifts: TupleLift(lifts) -> lifts

  lift-types = zip(lift-type)

  lift-type: (IdLift(), ty) -> ty
  lift-type: (ListLift(), ty) -> LIST(ty)
  lift-type: (TupleLift(lifts), TUPLE(tys)) -> TUPLE(<lift-types> (lifts, tys))
