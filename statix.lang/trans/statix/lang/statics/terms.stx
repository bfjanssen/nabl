module statix/lang/statics/terms

imports
  signatures/statix/lang/Core-sig
  signatures/statix/lang/Sugar-sig
  signatures/statix/lang/NoParse-sig
  signatures/statix/lang/Type-sig
  statix/lang/statics/util
  statix/lang/statics/types

rules
  termOk : scope * Term -> TType
  termsOk maps termOk(*, list(*)) = list(*)
  listTermOk maps termOk(*, list(*)) = *

  termOk(_, Int2Term(a@Int(_))) = INT() :-
    @a.type := INT().
  termOk(_, Str2Term(a@Str(_))) = STRING() :-
    @a.type := STRING().

  termOk(_, Var2Term(a@Wld())) = T :-
    @a.type := T.
  termOk(s, Var2Term(a@Var(var))) = T :-
    T == typeOfVariable(s, var),
    @a.type := T,
    @var.escape := scopeIsEqual(getBarrier(s), getVarBarrier(s, var)).

  termOk(s, a@List(xs)) = LIST(T) :-
    T == listTermOk(s, xs),
    @a.type := LIST(T).

  termOk(s, a@ListTail(hs, tail)) = LIST(T) :-
    T == listTermOk(s, hs),
    LIST(T) == termOk(s, tail),
    @a.type := LIST(T).

  termOk(s, a@Tuple(t)) = TUPLE(TS) :-
    TS == termsOk(s, t),
    @a.type := TUPLE(TS).

  termOk(s, a@Op(id, Terms2CommaTerms(ts))) = T :- {CTS sid len}
    len == termListLength(ts),
    (CTS, T) == typeOfCons(s, id, len),
    CTS == termsOk(s, ts),
    @a.type := T.

  termOk(s, a@COp(cid, Terms2CommaTerms(ts))) = RT :- {TS}
    FUN(TS, RT) == typeOfConstraint(s, cid) | error "Inline notation can only be used for functional constraints",
    TS == termsOk(s, ts),
    @a.type := RT.

  termOk(s, a@As(w@Wld(), term)) = T :-
    T == termOk(s, term),
    @a.type := T,
    @w.type := T,
    try { false } | warning "Are you sure you want to ascribe to a wildcard?".
  termOk(s, a@As(v@Var(var), term)) = T :-
    T == typeOfVariable(s, var),
    T == termOk(s, term),
    @a.type := T,
    @v.type := T.

  termOk(s, a@Ascribe(term, ty)) = T :-
    T == termOk(s, term),
    T == sortRefToType(s, ty),
    @a.type := T.

  termOk(_, a@NewOp()) = SCOPE() :-
    @a.type := SCOPE().

  termOk(s, a@AstIdOp(t)) = AST_ID() :-
    _ == termOk(s, t),
    @a.type := AST_ID().

  termOk(s, Path2Term(PathLit2Path(a@PathEmpty(st)))) = PATH() :-
    SCOPE() == termOk(s, st),
    @a.type := PATH().

  termOk(s, Path2Term(PathLit2Path(a@PathStep(pt, lt, st)))) = PATH() :-
    PATH() == termOk(s, pt),
    LABEL() == termOk(s, lt),
    SCOPE() == termOk(s, st),
    @a.type := PATH().

  termOk(s, a@ArithOp(aExp)) = INT() :-
    arithExpOk(s, aExp),
    @a.type := INT().

rules
  arithExpOk : scope * ArithExp

  arithExpOk(_, Int2ArithExp(_)).

  arithExpOk(_, Var2ArithExp(a@Wld())) :-
    @a.type := INT().
  arithExpOk(s, Var2ArithExp(a@Var(var))) :-
    typeOfVariable(s, var) == INT(),
    @a.type := INT().

  arithExpOk(s, AAdd(e1, e2)) :-
    arithExpOk(s, e1),
    arithExpOk(s, e2).

  arithExpOk(s, AMul(e1, e2)) :-
    arithExpOk(s, e1),
    arithExpOk(s, e2).

  arithExpOk(s, ASub(e1, e2)) :-
    arithExpOk(s, e1),
    arithExpOk(s, e2).

  arithExpOk(s, AMin(e1, e2)) :-
    arithExpOk(s, e1),
    arithExpOk(s, e2).

  arithExpOk(s, AMax(e1, e2)) :-
    arithExpOk(s, e1),
    arithExpOk(s, e2).

  arithExpOk(s, AMod(e1, e2)) :-
    arithExpOk(s, e1),
    arithExpOk(s, e2).

  arithExpOk(s, ADiv(e1, e2)) :-
    arithExpOk(s, e1),
    arithExpOk(s, e2).